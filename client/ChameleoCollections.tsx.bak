import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { useChameleoProducts } from '@/hooks/useChameleoProducts';
import { Collection, Stats } from '@/services/chameleoApi';
import { ChevronDown, ChevronUp, RefreshCw, Grid, List } from 'lucide-react';
import { Link } from 'react-router-dom';

/**
 * Catégories principales correspondant au mega menu
 */
interface CategoryGroup {
  title: string;
  handle: string;
  collections: Collection[];
}

/**
 * Page affichant toutes les collections Chamelo organisées selon la structure du mega menu
 */
const ChameleoCollections: React.FC = () => {
  // Utilisation du hook personnalisé pour accéder aux collections Chamelo
  const { collections, isLoading: apiLoading, error, syncCatalog, stats } = useChameleoProducts({}, true, true);
  const [localLoading, setLocalLoading] = useState(false);
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [expandedCategories, setExpandedCategories] = useState<string[]>([]);
  const [expandedCollections, setExpandedCollections] = useState<string[]>([]);
  const isLoading = apiLoading || localLoading;

  // Organiser les collections par catégorie
  const categoryGroups = useMemo(() => {
    if (!collections || collections.length === 0) return [];

    // Définir les catégories selon le mega menu
    const categories: CategoryGroup[] = [
      { title: 'Sport', handle: 'sport', collections: [] },
      { title: 'Lifestyle', handle: 'lifestyle', collections: [] },
      { title: 'Prismatic', handle: 'prismatic', collections: [] },
      { title: 'Smart Sunglasses', handle: 'smart-sunglasses', collections: [] },
      { title: 'Accessoires', handle: 'accessories', collections: [] },
      { title: 'Bundles & Kits', handle: 'bundles', collections: [] },
      { title: 'Étuis & Protection', handle: 'cases', collections: [] },
      { title: 'Pièces détachées', handle: 'parts', collections: [] },
      { title: 'Nouveautés', handle: 'new-arrivals', collections: [] },
      { title: 'Bestsellers', handle: 'bestsellers', collections: [] },
      { title: 'Autres', handle: 'other', collections: [] }
    ];
    
    // Fonction pour catégoriser les collections selon le design Chamelo
    const getCategoryHandle = (collection: Collection): string => {
      const title = collection.title?.toLowerCase() || '';
      const handle = collection.handle?.toLowerCase() || '';
      const description = collection.description?.toLowerCase() || '';
      
      // Catégories principales (SPORT, LIFESTYLE, PRISMATIC)
      if (title.includes('shield') || handle.includes('shield') || 
          title.includes('sport') || handle.includes('sport')) {
        return 'sport';
      } else if (title.includes('veil') || handle.includes('veil') || 
                title.includes('dragon') || handle.includes('dragon') || 
                title.includes('lifestyle') || handle.includes('lifestyle')) {
        return 'lifestyle';
      } else if (title.includes('euphoria') || handle.includes('euphoria') || 
                title.includes('aura') || handle.includes('aura') || 
                title.includes('prismatic') || handle.includes('prismatic')) {
        return 'prismatic';
      } else if (title.includes('smart sunglasses') || handle.includes('smart-sunglasses')) {
        return 'smart-sunglasses';
      }
      
      // Accessoires et autres catégories (affichés séparément)
      if (title.includes('accessoire') || handle.includes('accessoire') || handle.includes('accessories') || 
          title.includes('accessory') || handle.includes('accessory') || 
          handle.includes('cleaner') || title.includes('cleaner') ||
          handle.includes('cleaning') || title.includes('cleaning')) {
        return 'accessories';
      }
      
      if (title.includes('bundle') || handle.includes('bundle') || 
          title.includes('kit') || handle.includes('kit') ||
          title.includes('pack') || handle.includes('pack')) {
        return 'bundles';
      }
      
      if (title.includes('case') || handle.includes('case') ||
          title.includes('étui') || handle.includes('etui') ||
          title.includes('protection') || handle.includes('protection')) {
        return 'cases';
      }
      
      if (title.includes('parts') || handle.includes('parts') ||
          title.includes('pièce') || handle.includes('piece') ||
          title.includes('replacement') || handle.includes('replacement')) {
        return 'parts';
      }
      
      if (title.includes('bestseller') || handle.includes('bestseller') || 
          description.includes('bestseller') || description.includes('best seller') ||
          title.includes('popular') || handle.includes('popular')) {
        return 'bestsellers';
      }
      
      if (title.includes('new') || handle.includes('new') ||
          description.includes('new release') || description.includes('new product') ||
          title.includes('nouv') || handle.includes('nouv') ||
          collection.published_at && new Date(collection.published_at) > new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)) {
        return 'new-arrivals';
      } else {
        return 'other';
      }
    };
    
    // Distribuer les collections dans leurs catégories respectives
    collections.forEach(collection => {
      const categoryHandle = getCategoryHandle(collection);
      const category = categories.find(cat => cat.handle === categoryHandle);
      if (category) {
        category.collections.push(collection);
      } else {
        categories.find(cat => cat.handle === 'other')?.collections.push(collection);
      }
    });
    
    // Trier les collections dans chaque catégorie
    categories.forEach(category => {
      category.collections.sort((a, b) => a.title.localeCompare(b.title));
    });
    
    // Ne retourner que les catégories avec des collections
    return categories.filter(category => category.collections.length > 0);
  }, [collections]);

  // Fonction pour basculer l'état d'expansion d'une collection
  const toggleCollectionExpansion = (handle: string) => {
    if (expandedCollections.includes(handle)) {
      setExpandedCollections(expandedCollections.filter(h => h !== handle));
    } else {
      setExpandedCollections([...expandedCollections, handle]);
    }
  };

  // Fonction pour rafraîchir les collections
  const handleRefresh = async () => {
    setLocalLoading(true);
    try {
      await syncCatalog();
    } finally {
      setLocalLoading(false);
    }
  };

  return (
    <div className="container mx-auto p-4 md:p-8">
      <div className="flex justify-between items-center mb-8 border-b pb-4">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white uppercase">
          CHAMELO COLLECTIONS
        </h1>
        <div className="flex items-center space-x-4">
          <button
            onClick={() => setViewMode(viewMode === 'grid' ? 'list' : 'grid')}
            className="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
          >
            {viewMode === 'grid' ? <List size={18} /> : <Grid size={18} />}
          </button>
          
          <button
            onClick={handleRefresh}
            disabled={isLoading || localLoading}
            className="flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50"
          >
            <RefreshCw className={`w-4 h-4 ${(isLoading || localLoading) ? 'animate-spin' : ''}`} />
            Refresh
          </button>
        </div>
      </div>
      
      {isLoading || localLoading ? (
        <div className="text-center py-12">
          <div className="animate-spin mx-auto w-12 h-12 border-4 border-blue-500 border-t-transparent rounded-full mb-4"></div>
          <p className="text-gray-600">Chargement des collections...</p>
        </div>
      ) : (
        <div className="space-y-16">
          {/* CATÉGORIES PRINCIPALES - SPORT, LIFESTYLE, PRISMATIC */}
          <div>
            <h2 className="text-xl font-semibold uppercase mb-8">MAIN COLLECTIONS</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-10">
              {/* SPORT */}
              <div>
                <h3 className="font-semibold text-md uppercase text-gray-800 dark:text-gray-200 mb-6">SPORT</h3>
                <div className="space-y-6">
                  {categoryGroups
                    .find(cat => cat.handle === 'sport')?.collections
                    .slice(0, 2)
                    .map(collection => (
                    <div key={collection.id}>
                      <Link 
                        to={`/chamelo-catalog?collection=sport&subCollection=${collection.handle}`}
                        className="group"
                      >
                        <div className="aspect-video bg-gray-100 dark:bg-gray-800 mb-3 overflow-hidden">
                          <img 
                            src={collection.image_url || '/images/products/default.jpg'} 
                            alt={collection.title || 'Sport Collection'} 
                            className="w-full h-full object-cover"
                            onError={(e) => {
                              (e.target as HTMLImageElement).src = '/images/products/default.jpg';
                            }} 
                          />
                        </div>
                        <p className="text-sm font-medium text-gray-900 dark:text-gray-100">
                          {collection.title}
                        </p>
                      </Link>
                    </div>
                  ))}
                  
                  <Link to="/chamelo-catalog?collection=sport" className="text-xs uppercase hover:underline inline-block">
                    See All
                  </Link>
                </div>
              </div>
              
              {/* LIFESTYLE */}
              <div>
                <h3 className="font-semibold text-md uppercase text-gray-800 dark:text-gray-200 mb-6">LIFESTYLE</h3>
                <div className="space-y-6">
                  {categoryGroups
                    .find(cat => cat.handle === 'lifestyle')?.collections
                    .slice(0, 2)
                    .map(collection => (
                    <div key={collection.id}>
                      <Link 
                        to={`/chamelo-catalog?collection=lifestyle&subCollection=${collection.handle}`}
                        className="group"
                      >
                        <div className="aspect-video bg-gray-100 dark:bg-gray-800 mb-3 overflow-hidden">
                          <img 
                            src={collection.image_url || '/images/products/default.jpg'} 
                            alt={collection.title || 'Lifestyle Collection'} 
                            className="w-full h-full object-cover"
                            onError={(e) => {
                              (e.target as HTMLImageElement).src = '/images/products/default.jpg';
                            }} 
                          />
                        </div>
                        <p className="text-sm font-medium text-gray-900 dark:text-gray-100">
                          {collection.title}
                        </p>
                      </Link>
                    </div>
                  ))}
                  
                  <Link to="/chamelo-catalog?collection=lifestyle" className="text-xs uppercase hover:underline inline-block">
                    See All
                  </Link>
                </div>
              </div>
              
              {/* PRISMATIC */}
              <div>
                <h3 className="font-semibold text-md uppercase text-gray-800 dark:text-gray-200 mb-6">PRISMATIC</h3>
                <div className="space-y-6">
                  {categoryGroups
                    .find(cat => cat.handle === 'prismatic')?.collections
                    .slice(0, 2)
                    .map(collection => (
                    <div key={collection.id}>
                      <Link 
                        to={`/chamelo-catalog?collection=prismatic&subCollection=${collection.handle}`}
                        className="group"
                      >
                        <div className="aspect-video bg-gray-100 dark:bg-gray-800 mb-3 overflow-hidden">
                          <img 
                            src={collection.image_url || '/images/products/default.jpg'} 
                            alt={collection.title || 'Prismatic Collection'} 
                            className="w-full h-full object-cover"
                            onError={(e) => {
                              (e.target as HTMLImageElement).src = '/images/products/default.jpg';
                            }} 
                          />
                        </div>
                        <p className="text-sm font-medium text-gray-900 dark:text-gray-100">
                          {collection.title}
                        </p>
                      </Link>
                    </div>
                  ))}
                  
                  <Link to="/chamelo-catalog?collection=prismatic" className="text-xs uppercase hover:underline inline-block">
                    See All
                  </Link>
                </div>
              </div>
            </div>
          </div>
          
          {/* AUTRES CATÉGORIES */}
          <div className="space-y-12">
            {categoryGroups.map((category) => (
              <section key={category.handle} className="mb-8">
                <div className="flex items-center mb-4 pb-2 border-b">
                  <h2 className="text-2xl font-bold text-gray-800">{category.title}</h2>
                  <span className="ml-2 text-sm bg-blue-100 text-blue-800 px-2 py-1 rounded">
                    {category.collections.length}
                  </span>
                  <Link 
                    to={`/chamelo-catalog?collection=${category.handle}`}
                    className="ml-auto text-sm text-blue-500 hover:underline"
                  >
                    Voir tous les produits →
                  </Link>
                </div>
                
                <div className={viewMode === 'grid' ? 
                  'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6' : 
                  'space-y-4'}
                >
                  {category.collections.map((collection) => (
                    <div 
                      key={collection.id} 
                      className={viewMode === 'grid' ? 
                        'border border-gray-200 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow' :
                        'flex border border-gray-200 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow'}
                    >
                      {/* Image de la collection (si disponible) */}
                      <div className={viewMode === 'grid' ? 
                        'relative h-48 overflow-hidden' : 
                        'relative w-1/3 overflow-hidden'}
                      >
                        <img
                          src={collection.image_url || `/images/collections/${category.handle}.jpg`}
                          alt={collection.title}
                          className="w-full h-full object-cover"
                          onError={(e) => {
                            const target = e.target as HTMLImageElement;
                            target.src = `/images/collections/default.jpg`;
                          }}
                        />
                        <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-3">
                          <span className="text-white font-semibold">{collection.products_count} produits</span>
                        </div>
                      </div>
                      
                      {/* Informations de la collection */}
                      <div className={viewMode === 'grid' ? 'p-4' : 'p-4 flex-1'}>
                        <div className="flex justify-between items-start mb-2">
                          <h3 className="text-xl font-bold text-gray-800">{collection.title}</h3>
                          <button
                            onClick={() => toggleCollectionExpansion(collection.handle)}
                            className="p-1 rounded-full hover:bg-gray-100"
                          >
                            {expandedCollections.includes(collection.handle) ? (
                              <ChevronUp size={20} />
                            ) : (
                              <ChevronDown size={20} />
                            )}
                          </button>
                        </div>
                        
                        <div className="text-sm text-gray-500 mb-3">
                          <span className="font-medium">Handle:</span> {collection.handle}
                        </div>
                        
                        {/* Détails de la collection (si développée) */}
                        {expandedCollections.includes(collection.handle) && (
                          <div className="mt-3 border-t border-gray-100 pt-3 text-sm">
                            <div className="space-y-3">
                              <div>
                                <h4 className="font-medium text-gray-700">Détails:</h4>
                                <ul className="mt-1 space-y-1">
                                  <li>ID: {collection.id}</li>
                                  <li>Produits: {collection.products_count}</li>
                                  <li>Mise à jour: {new Date(collection.updated_at).toLocaleDateString()}</li>
                                  <li>Publication: {collection.published_at ? new Date(collection.published_at).toLocaleDateString() : 'Non publié'}</li>
                                </ul>
                              </div>
                            </div>
                          </div>
                        )}
                        
                        {/* Lien vers les produits de la collection */}
                        <div className="mt-4 pt-3 border-t border-gray-100 flex justify-between">
                          <Link
                            to={`/chamelo-catalog?collection=${collection.handle}`}
                            className="px-4 py-2 bg-blue-500 text-white text-sm rounded-lg hover:bg-blue-600"
                          >
              </div>
            </div>
            
            {/* Informations de la collection */}
            <div className={viewMode === 'grid' ? 'p-4' : 'p-4 flex-1'}>
              <div className="flex justify-between items-start mb-2">
                <h3 className="text-xl font-bold text-gray-800">{collection.title}</h3>
                <button
                  onClick={() => toggleCollectionExpansion(collection.handle)}
                  className="p-1 rounded-full hover:bg-gray-100"
                >
                  {expandedCollections.includes(collection.handle) ? (
                    <ChevronUp size={20} />
                  ) : (
                    <ChevronDown size={20} />
                  )}
                </button>
              </div>
              
              <div className="text-sm text-gray-500 mb-3">
                <span className="font-medium">Handle:</span> {collection.handle}
              </div>
              
              {/* Détails de la collection (si développée) */}
              {expandedCollections.includes(collection.handle) && (
                <div className="mt-3 border-t border-gray-100 pt-3 text-sm">
                  <div className="space-y-3">
                    <div>
                      <h4 className="font-medium text-gray-700">Détails:</h4>
                      <ul className="mt-1 space-y-1">
                        <li>ID: {collection.id}</li>
                        <li>Produits: {collection.products_count}</li>
                        <li>Mise à jour: {new Date(collection.updated_at).toLocaleDateString()}</li>
                        <li>Publication: {collection.published_at ? new Date(collection.published_at).toLocaleDateString() : 'Non publié'}</li>
                      </ul>
                    </div>
                  </div>
                </div>
              )}
              
              {/* Lien vers les produits de la collection */}
              <div className="mt-4 pt-3 border-t border-gray-100 flex justify-between">
                <Link
                  to={`/chamelo-catalog?collection=${collection.handle}`}
                  className="px-4 py-2 bg-blue-500 text-white text-sm rounded-lg hover:bg-blue-600"
                >
                  Voir les produits
                </Link>
              </div>
            </div>
          </div>
        ))}
      </div>
    </section>
  ))}
</div>
</div>
);
};

export default ChameleoCollections;
