// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - upgraded for new auth system
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  isVerified      Boolean   @default(false)
  role            Role      @default(USER)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  profile         Profile?
  carts           Cart[]
  orders          Order[]
  favorites       Favorite[]
  refreshTokens   RefreshToken[]
  passwordResets  PasswordReset[]
  configurations  ProductConfiguration[]
}

// Profile model
model Profile {
  id              String    @id @default(cuid())
  userId          String    @unique
  first_name      String?
  last_name       String?
  phone           String?
  company_name    String?
  company_siret   String?
  company_sector  String?
  user_type       String    @default("client")
  pricing_group   String?
  avatar_url      String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// RefreshToken model
model RefreshToken {
  id              String    @id @default(cuid())
  token           String    @unique
  userId          String
  expiresAt       DateTime
  createdAt       DateTime  @default(now())
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// PasswordReset model
model PasswordReset {
  id              String    @id @default(cuid())
  token           String    @unique
  userId          String
  expiresAt       DateTime
  createdAt       DateTime  @default(now())
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Collection model
model Collection {
  id            String    @id @default(cuid())
  nom           String
  slug          String    @unique
  description   String?
  image         String?
  active        Boolean   @default(true)
  produits      Produit[] 
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Produit model
model Produit {
  id                String                @id @default(cuid())
  nom               String
  slug              String                @unique
  description       String?
  prix              Float
  collectionId      String?
  collection        Collection?           @relation(fields: [collectionId], references: [id])
  sportifCibleId    String?
  sportifCible      SportifCible?         @relation(fields: [sportifCibleId], references: [id])
  variantes         Variante[]
  specifications    Specification[]
  assets            Asset[]
  favorites         Favorite[]
  configurations    ProductConfiguration[]
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

// Variante model
model Variante {
  id            String    @id @default(cuid())
  sku           String    @unique
  couleur       String?
  taille        String?
  stock         Int       @default(0)
  prix          Float?
  produitId     String
  produit       Produit   @relation(fields: [produitId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Specification model
model Specification {
  id            String    @id @default(cuid())
  nom           String
  valeur        String
  produitId     String
  produit       Produit   @relation(fields: [produitId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Asset model
model Asset {
  id            String    @id @default(cuid())
  type          AssetType
  url           String
  titre         String?
  produitId     String
  produit       Produit   @relation(fields: [produitId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// SportifCible model
model SportifCible {
  id            String    @id @default(cuid())
  nom           String    @unique
  description   String?
  produits      Produit[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Favorite model
model Favorite {
  id            String    @id @default(cuid())
  userId        String
  produitId     String
  createdAt     DateTime  @default(now())
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  produit       Produit   @relation(fields: [produitId], references: [id], onDelete: Cascade)
  
  // Make sure a user can only favorite a product once
  @@unique([userId, produitId])
}

// ProductConfiguration model
model ProductConfiguration {
  id               String    @id @default(cuid())
  userId           String
  produitId        String
  selectedVariants Json      // Store as JSON to handle dynamic variant selections
  options          Json?     // Optional additional configuration options
  calculatedPrice  Float
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  produit          Produit   @relation(fields: [produitId], references: [id], onDelete: Cascade)
}

// Enum pour les types d'assets
enum AssetType {
  IMAGE
  VIDEO
  PDF
  OTHER
}

// Legacy Product model - maintain compatibility with existing code
model Product {
  id            String    @id @default(cuid())
  name          String
  slug          String    @unique
  description   String?
  price         Float
  images        String[]
  stock         Int       @default(0)
  categoryId    String?
  category      Category?  @relation(fields: [categoryId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  cartItems     CartItem[]
  orderItems    OrderItem[]
  bestseller    Boolean   @default(false)
}

// Category model
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Cart model
model Cart {
  id          String    @id @default(cuid())
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  items       CartItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// CartItem model
model CartItem {
  id          String    @id @default(cuid())
  cartId      String
  cart        Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Order model
model Order {
  id              String    @id @default(cuid())
  userId          String?
  user            User?     @relation(fields: [userId], references: [id])
  items           OrderItem[]
  status          OrderStatus @default(PENDING)
  total           Float
  shippingAddress String?
  paymentMethod   String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// OrderItem model
model OrderItem {
  id          String    @id @default(cuid())
  orderId     String
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  price       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Enums
enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
