#!/usr/bin/env node
const { execSync } = require('child_process');
const readline = require('readline');
const fs = require('fs');
const path = require('path');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

/**
 * Ex√©cute une commande et affiche sa sortie
 */
function runCommand(command) {
  try {
    console.log(`\nüîÑ Ex√©cution de: ${command}\n`);
    execSync(command, { stdio: 'inherit' });
    return true;
  } catch (error) {
    console.error(`\n‚ùå Erreur lors de l'ex√©cution de la commande: ${command}`);
    console.error(error.message);
    return false;
  }
}

/**
 * V√©rifie si le fichier .env existe, sinon le cr√©e √† partir de .env.example
 */
function checkEnvFile() {
  const envPath = path.join(__dirname, '..', '.env');
  const envExamplePath = path.join(__dirname, '..', '.env.example');

  if (!fs.existsSync(envPath)) {
    if (fs.existsSync(envExamplePath)) {
      fs.copyFileSync(envExamplePath, envPath);
      console.log(`\n‚úÖ Fichier .env cr√©√© √† partir de .env.example.`);
      console.log(`‚ö†Ô∏è  N'oubliez pas de personnaliser vos variables d'environnement dans .env !`);
    } else {
      console.log(`\n‚ö†Ô∏è  Le fichier .env.example n'existe pas. Cr√©ation d'un fichier .env basique.`);
      fs.writeFileSync(envPath, 'DATABASE_URL="postgresql://utilisateur:motdepasse@localhost:5432/my_vision_connect?schema=public"\nPORT=5000\nJWT_SECRET=changez_moi_en_production\n');
    }
  }
}

/**
 * Fonction principale
 */
async function main() {
  console.log('üîß Assistant de configuration de la base de donn√©es pour My Vision Connect üîß\n');
  
  // V√©rifier le fichier .env
  checkEnvFile();

  // Menu d'options
  const showMenu = () => {
    console.log('\nüìã Que souhaitez-vous faire ?');
    console.log('1. G√©n√©rer le client Prisma (npx prisma generate)');
    console.log('2. Cr√©er la migration initiale (npx prisma migrate dev --name init)');
    console.log('3. Appliquer les migrations existantes (npx prisma migrate deploy)');
    console.log('4. Cr√©er des donn√©es de test (seed)');
    console.log('5. Visualiser la base de donn√©es (Prisma Studio)');
    console.log('6. R√©initialiser la base de donn√©es (‚ö†Ô∏è Supprime toutes les donn√©es)');
    console.log('7. Tout faire (1 + 2 + 4)');
    console.log('0. Quitter');
  };

  const askOption = () => {
    showMenu();
    rl.question('\nEntrez votre choix (0-7): ', async (answer) => {
      switch (answer) {
        case '1':
          runCommand('npx prisma generate');
          askOption();
          break;
        case '2':
          rl.question('\nNom de la migration (defaut: "init"): ', (name) => {
            const migrationName = name || 'init';
            runCommand(`npx prisma migrate dev --name ${migrationName}`);
            askOption();
          });
          break;
        case '3':
          runCommand('npx prisma migrate deploy');
          askOption();
          break;
        case '4':
          runCommand('node -e "require(\'../dist/utils/prismaUtils\').seedDatabase()"');
          askOption();
          break;
        case '5':
          console.log('\nüîç Lancement de Prisma Studio...');
          console.log('‚ö†Ô∏è  Pour revenir √† ce menu, fermez Prisma Studio (Ctrl+C dans le terminal)');
          runCommand('npx prisma studio');
          askOption();
          break;
        case '6':
          rl.question('\n‚ö†Ô∏è  Cette action va supprimer toutes les donn√©es. √ätes-vous s√ªr ? (oui/non): ', (confirm) => {
            if (confirm.toLowerCase() === 'oui') {
              runCommand('npx prisma migrate reset --force');
            } else {
              console.log('‚ùå Op√©ration annul√©e');
            }
            askOption();
          });
          break;
        case '7':
          console.log('\nüöÄ Configuration compl√®te de la base de donn√©es...');
          runCommand('npx prisma generate');
          runCommand('npx prisma migrate dev --name initial');
          runCommand('node -e "require(\'../dist/utils/prismaUtils\').seedDatabase()"');
          console.log('\n‚úÖ Configuration termin√©e !');
          askOption();
          break;
        case '0':
          console.log('\nüëã Au revoir !');
          rl.close();
          break;
        default:
          console.log('\n‚ùå Option invalide, veuillez r√©essayer.');
          askOption();
      }
    });
  };

  // D√©marrer le menu
  askOption();
}

// Ex√©cuter la fonction principale
main().catch(console.error);
